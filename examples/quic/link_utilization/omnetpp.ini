[General]
network = bottleneck

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

output-vector-file = "${resultdir}/link_utilization_mtu=${mtu}.vec"
output-scalar-file = "${resultdir}/link_utilization_mtu=${mtu}.sca"

# Set the quic module, which can be in the StandardHost anything that implements IQuic, to our concrete Quic implementation
**.quic.typename = "Quic"

# Set connection and stream level flow control limits large enough,
# such that the sender is not limited by the flow control.
**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B

**.bottleneckDelay = ${delay=10}ms
**.bottleneckDatarate = ${bw=10}Mbps

**.quic.numReceivedAckElicitingsBeforeAck = 2
# Use the Bandwidth-Delay-Product (BDP) for the size of the queues.
# Add the size of 5 packets to have some more space (e.g. to componsate having an ack only for every second packet)
**.ppp[*].queue.dataCapacity = ${bw} * 2*${delay} kb + 5 * ${mtu} B
**.ppp[*].ppp.mtu = ${mtu=1280,1452,1500,9000}B

**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[0].numGenerators = 1

**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 0
**.sender.app[0].generator[0].packetSize			= 1000B
**.sender.app[0].generator[0].startTime				= 2s
**.sender.app[0].generator[0].stopTime				= 5s
**.sender.app[0].generator[0].packetInterval		= 0ms
**.sender.app[0].generator[0].ordered				= false

**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"

**.sender.quic.sendQueueLimit = 500000B
**.sender.quic.sendQueueLowWaterRatio = .8
**.quic.bundleAckForNonAckElicitingPackets = false

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000
