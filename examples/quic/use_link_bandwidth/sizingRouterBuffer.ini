[General]
network = bottleneck_link

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

output-vector-file = "${resultdir}/SizingRouterBuffer.vec"
output-scalar-file = "${resultdir}/SizingRouterBuffer.sca"

# Set the quic module, which can be in the StandardHost anything that implements IQuic, to our concrete Quic implementation
**.quic.typename = "Quic"

# Avoid flow control
**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B

**.bottleneckDelay = 1ms
**.bottleneckDatarate = 100Mbps

**.ppp[*].ppp.queue.packetCapacity = 22
**.ppp[*].ppp.mtu = 1280B

**.client.numApps = 1
**.client.app[*].typename = "TrafficgenCompound"
**.client.app[0].numGenerators = 1

**.client.app[0].generator[0].typename				= "TrafficgenSimple"
**.client.app[0].generator[0].id					= 0
**.client.app[0].generator[0].packetSize			= 15000B
**.client.app[0].generator[0].startTime			= 2s
#**.client.app[0].generator[0].packetCount			= 100
**.client.app[0].generator[0].stopTime				= 11s #${stopTime=11s}
**.client.app[0].generator[0].packetInterval		= 0ms
**.client.app[0].generator[0].ordered				= false
#**.client.app[0].generator[0].packetBurstSize		= 1

**.client.app[*].handler.typename = "QuicTrafficgen"
**.client.app[*].handler.localPort = 1001
**.client.app[*].handler.connectPort = 1000
**.client.app[*].handler.connectAddress = "server"

**.client.quic.sendQueueLimit = 500000B
**.client.quic.sendQueueLowWaterRatio = .8

**.client.quic.bundleAckForNonAckElicitingPackets = true

**.server.numApps = 1
**.server.app[*].typename = "QuicDiscardServer"
**.server.app[*].localAddress = ""
**.server.app[*].localPort = 1000

**.server.quic.receiveGoodputStatStartTime = 5s
**.server.quic.receiveGoodputStatEndTime = 10s

**.server.quic.numReceivedAckElicitingsBeforeAck = 1
