[General]
#network = bottleneck_link_shared
network = bottleneck_link
#network = direct_link

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

# Set the quic module, which can be in the StandardHost anything that implements IQuic, to our concrete Quic implementation
**.quic.typename = "Quic"

# Connection level flow control credit. 
# For each side the own limit and the peers limit.
**.quic.initialMaxData = 4294967295B #1024*1024
# What I want to set is:
#**.client.quic.peersInitialMaxData = inf

# Stream level flow control credit for bidirectional streams opend be the remote host,
# e. g. client can send at most this much on stream 0 without receiving a MAX_STREAM_DATA frame from the server. 
# For each side the own limit and the peers limit.
**.quic.initialMaxStreamDataBidiRemote = 1024*1024
# What I want to set is:
#**.client.quic.peersInitialMaxStreamDataBidiRemote = inf

# Stream level flow control credit for unidirectional streams.
# It is not planned to use unidirectional stream in this example,
# but, currently, this is the one and only value used for all stream level flow control credits in the QUIC implementation.
**.quic.initialMaxStreamDataUni = 4294967295B #1024*1024

**.bottleneckDelay = ${delay=70}ms #${delay=1ms, 10ms, 100ms}
**.bottleneckDatarate = ${bw=10}Mbps #${bw=100Mbps, 10Mbps}

**.ppp[*].ppp.queue.packetCapacity = ${q=200} #${q=10,100,1000, 2200}
**.ppp[*].ppp.mtu = ${mtu=1280}B #${mtu=1280,1452,1500,9000}B

**.client.numApps = 1
**.client.app[*].typename = "TrafficgenCompound"
**.client.app[0].numGenerators = 1

**.client.app[0].generator[0].typename				= "TrafficgenSimple"
**.client.app[0].generator[0].id					= 0
**.client.app[0].generator[0].packetSize			= 15000B
**.client.app[0].generator[0].startTime			= 2s
#**.client.app[0].generator[0].packetCount			= 100
**.client.app[0].generator[0].stopTime				= 30s #${stopTime=11s}
**.client.app[0].generator[0].packetInterval		= 0ms
**.client.app[0].generator[0].ordered				= false
#**.client.app[0].generator[0].packetBurstSize		= 1

**.client.app[*].handler.typename = "QuicTrafficgen"
**.client.app[*].handler.localPort = 1001
**.client.app[*].handler.connectPort = 1000
**.client.app[*].handler.connectAddress = "server"

**.client.quic.sendQueueLimit = 431940B #1220700 #${ql=$delay*500000} # 68860
# sendBufferUnsentData_min = sendQueueLimit * sendQueueLowWaterRation - cwnd_max > 0
# <==> sendQueueLimit > cwnd_max/LowWaterRatio = (BDP + RouterBuffer)/LowWaterRatio
**.client.quic.sendQueueLowWaterRatio = .8
**.quic.bundleAckForNonAckElicitingPackets = true

**.server.numApps = 1
**.server.app[*].typename = "QuicDiscardServer"
**.server.app[*].localAddress = ""
**.server.app[*].localPort = 1000

**.server.quic.receiveGoodputStatStartTime = 5s
**.server.quic.receiveGoodputStatEndTime = 29s

**.server.quic.numReceivedAckElicitingsBeforeAck = 1

########## UDP for random traffic
**.random*.numApps = 1
**.random*.app[*].typename = "UdpBasicApp"
**.random*.app[0].localPort = 100
**.random*.app[0].destPort = 100
**.random*.app[0].messageLength = int(uniform(100B,1000B))
**.random*.app[0].sendInterval = uniform(25ms,100ms)
**.random*.app[0].startTime = 1s
**.random*.app[0].stopTime = 12s #${$stopTime+1s}

**.randomCli.app[0].destAddresses = "randomSrv"
**.randomSrv.app[0].destAddresses = ""
