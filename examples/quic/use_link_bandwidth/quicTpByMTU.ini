[General]
network = bottleneck_link

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

output-vector-file = "${resultdir}/QuicTpByMTU=${mtu}.vec"
output-scalar-file = "${resultdir}/QuicTpByMTU=${mtu}.sca"

# Set the quic module, which can be in the StandardHost anything that implements IQuic, to our concrete Quic implementation
**.quic.typename = "Quic"

# Connection level flow control credit. 
# For each side the own limit and the peers limit.
**.quic.initialMaxData = 4294967295B #1024*1024
# What I want to set is:
#**.client.quic.peersInitialMaxData = inf

# Stream level flow control credit for bidirectional streams opend be the remote host,
# e. g. client can send at most this much on stream 0 without receiving a MAX_STREAM_DATA frame from the server. 
# For each side the own limit and the peers limit.
#**.quic.initialMaxStreamDataBidiRemote = 1024*1024B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B
# What I want to set is:
#**.client.quic.peersInitialMaxStreamDataBidiRemote = inf

# Stream level flow control credit for unidirectional streams.
# It is not planned to use unidirectional stream in this example,
# but, currently, this is the one and only value used for all stream level flow control credits in the QUIC implementation.
**.quic.initialMaxStreamDataUni = 4294967295B #1024*1024

**.bottleneckDelay = ${delay=1ms} #${delay=1ms, 10ms, 100ms}
**.bottleneckDatarate = ${bw=100Mbps} #${bw=100Mbps, 10Mbps}

#**.ppp[*].queue.frameCapacity = ${q=23} #${q=10,100,1000}
#**.ppp[*].queue.packetCapacity = ${q=24} #${q=10,100,1000}
#**.quic.numReceivedAckElicitingsBeforeAck = 1
#**.ppp[*].queue.packetCapacity = (${mtu} == 1280 ? 22 : (${mtu} == 1452 ? 20 : (${mtu} == 1500 ? 20 : (${mtu} == 9000 ? 4 : 0))))
**.quic.numReceivedAckElicitingsBeforeAck = 2
**.ppp[*].queue.packetCapacity = (${mtu} == 1280 ? 24 : (${mtu} == 1452 ? 22 : (${mtu} == 1500 ? 22 : (${mtu} == 9000 ? 6 : 0))))
**.ppp[*].ppp.mtu = ${mtu=1280,1452,1500,9000}B

**.client.numApps = 1
**.client.app[*].typename = "TrafficgenCompound"
**.client.app[0].numGenerators = 1

**.client.app[0].generator[0].typename				= "TrafficgenSimple"
**.client.app[0].generator[0].id					= 0
**.client.app[0].generator[0].packetSize			= 1000B
**.client.app[0].generator[0].startTime			= 2s
#**.client.quicApp[0].generator[0].packetCount			= 100
**.client.app[0].generator[0].stopTime				= 11s
**.client.app[0].generator[0].packetInterval		= 0ms
**.client.app[0].generator[0].ordered				= false
#**.client.quicApp[0].generator[0].packetBurstSize		= 1

**.client.app[*].handler.typename = "QuicTrafficgen"
**.client.app[*].handler.localPort = 1001
**.client.app[*].handler.connectPort = 1000
**.client.app[*].handler.connectAddress = "server"

**.client.quic.sendQueueLimit = 500000B
# sendBufferUnsentData_min = sendQueueLimit * sendQueueLowWaterRation - cwnd_max > 0
# <==> sendQueueLimit > cwnd_max/LowWaterRatio = (BDP + RouterBuffer)/LowWaterRatio
**.client.quic.sendQueueLowWaterRatio = .8
**.quic.bundleAckForNonAckElicitingPackets = false

**.server.numApps = 1
**.server.app[*].typename = "QuicDiscardServer"
**.server.app[*].localAddress = ""
**.server.app[*].localPort = 1000

**.server.quic.receiveGoodputStatStartTime = 5s
**.server.quic.receiveGoodputStatEndTime = 10s
