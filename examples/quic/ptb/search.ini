[General]
network = Bottleneck4
#repeat = 10
sim-time-limit = 500s

seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
result-dir="../../../results/quic/ptb/search"

**.sender.quic.dplpmtudSearchTime**.scalar-recording = true
**.sender.ppp[0].ppp.txPk:count.scalar-recording = true
#**.router1.ipv4.ip.packetDrop**.vector-recording = true
#**.router2.ppp[1].ppp.packetDropIncorrectlyReceived**.vector-recording = true
**.scalar-recording = false
**.vector-recording = false
**.param-recording = false

**.quic.typename = "Quic"

**.sender.quic.useDplpmtud = true
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "OptBinary"
**.sender.quic.dplpmtudUsePtb = true

**.sender.quic.congestionControl = "NewReno"#"No"

**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B


# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"
**.sender.app[0].numGenerators = (${msgLength} == 0 ? 0 : 1)
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
# start after sender receives ack for base probe
# i.e., after sending probe for base (1287B) and receive ack (53B)
# 2 * oneWayDelay + transmissionDelay over two 1000 Mb/s = 125000 B/ms and two 100 Mb/s = 12500 B/ms links
**.sender.app[0].generator[0].startTime				= 2ms * (${delay} + (1287 + 53) * (1/125000 + 1/12500)) + 0.000001ms
**.sender.app[0].generator[0].packetSize			= ${msgLength=0, 1, 10, 100, 1000, 10000}*1kB
**.sender.app[0].generator[0].packetCount			= 1

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

**.oneWayDelay = ${delay=10, 20, 30, 40}ms
**.router1.ppp[*].queue.dataCapacity = 100 * 2*${delay} kb

[withoutPMTUD]
**.sender.quic.maxPmtu = 1280B

**.ppp[*].ppp.mtu = 1500B

output-vector-file = ${resultdir}/withoutPMTUD/delay=${delay}/msgLength=${msgLength}/${repetition}.vec
output-scalar-file = ${resultdir}/withoutPMTUD/delay=${delay}/msgLength=${msgLength}/${repetition}.sca

[withPMTUD]
**.sender.quic.skipPacketNumberForDplpmtudProbePackets = ${skipPacketNumber=true}

[withPMTUD1]
extends = withPMTUD

**.router1.ppp[1].ppp.mtu = ${mtu1=1500}*1B
**.router2.ppp[0].ppp.mtu = ${mtu1}*1B
**.router2.ppp[1].ppp.mtu = ${mtu2=1280..1500 step 4}*1B
**.router3.ppp[0].ppp.mtu = ${mtu2}*1B
**.ppp[*].ppp.mtu = 1500B

**.router1.ipv4.icmp.quoteLength = ${ptb1=1}*100B + 8B
**.router2.ipv4.icmp.quoteLength = ${ptb2=0, 1}*100B + 8B

output-vector-file = ${resultdir}/withPMTUD/delay=${delay}/msgLength=${msgLength}/mtu1=${mtu1}/mtu2=${mtu2}/ptb1=${ptb1}/ptb2=${ptb2}/${repetition}.vec
output-scalar-file = ${resultdir}/withPMTUD/delay=${delay}/msgLength=${msgLength}/mtu1=${mtu1}/mtu2=${mtu2}/ptb1=${ptb1}/ptb2=${ptb2}/${repetition}.sca

[withPMTUD2]
extends = withPMTUD

**.router1.ppp[1].ppp.mtu = ${mtu1=1280..1500 step 4}*1B
**.router2.ppp[0].ppp.mtu = ${mtu1}*1B
**.router2.ppp[1].ppp.mtu = ${mtu2=1280..${mtu1} step 4}*1B
**.router3.ppp[0].ppp.mtu = ${mtu2}*1B
**.ppp[*].ppp.mtu = 1500B

**.router1.ipv4.icmp.quoteLength = ${ptb1=0, 1}*100B + 8B
**.router2.ipv4.icmp.quoteLength = ${ptb2=0, 1}*100B + 8B

#constraint = $mtu1 >= $mtu2

output-vector-file = ${resultdir}/withPMTUD/delay=${delay}/msgLength=${msgLength}/mtu1=${mtu1}/mtu2=${mtu2}/ptb1=${ptb1}/ptb2=${ptb2}/${repetition}.vec
output-scalar-file = ${resultdir}/withPMTUD/delay=${delay}/msgLength=${msgLength}/mtu1=${mtu1}/mtu2=${mtu2}/ptb1=${ptb1}/ptb2=${ptb2}/${repetition}.sca

