[General]
network = Bottleneck4_
sim-time-limit = 500s

seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
result-dir="../../../results/quic/ptb/decrease"

#**.sender.quic.dplpmtudInvalidSignals**.vector-recording = true
**.sender.quic.dplpmtudSearchPmtu**.vector-recording = true
**.router2.ipv4.ip.packetDrop**.vector-recording = true
#**.router2.ipv4.ip.packetDropUndefined:count.scalar-recording = true
#**.router2.ppp[1].ppp.packetDropIncorrectlyReceived**.vector-recording = true
**.router3.ppp[1].ppp.packetDropIncorrectlyReceived:count.scalar-recording = true
**.sender.ppp[0].ppp.txPk:count.scalar-recording = true
**.sender.ppp[0].ppp.txPk:vector**.vector-recording = true	
**.receiver.app[0].bytesReceived:vector.vector-recording = true	
**.quic.packetNumber**.vector-recording = true
**.scalar-recording = false
**.vector-recording = false
**.param-recording = false

# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"
**.sender.app[0].numGenerators = 1
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

**.quic.typename = "Quic"
**.sender.quic.useDplpmtud = true
#**.sender.ppp[0].ppp.mtu = 1280B
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "OptBinary"
**.sender.quic.dplpmtudUsePtb = ${ptb=true, false}
#**.router1.ipv4.icmp.quoteLength = 100B
**.router2.ipv4.icmp.quoteLength = 100B

**.sender.quic.reducePacketTimeThreshold = ${r=-4}s
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=1}

**.sender.quic.congestionControl = "NewReno"#"No"

**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B

**.router2.ppp[3].ppp.mtu = 1300B
**.router3.ppp[1].ppp.mtu = 1300B
**.ppp[*].ppp.mtu = 1500B


[cc-limited]

repeat = 1

**.oneWayDelay = ${delay=1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55}ms
**.router1.ppp[*].queue.dataCapacity = 100 * 2*${delay} kb

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=3}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=-3}s
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=\
#	(2*$delay), (6*$delay+25), (10*$delay+2*25),\
#	(4*$delay+25), (12*$delay+4*25), (20*$delay+7*25),\
#	(8*$delay+3*25), (24*$delay+10*25), (40*$delay+17*25) \
#}*1ms

*.scenarioManager.script = xml("<x> \
<at t='${pmtuDecreaseTime=1050, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3250, 3500, 3750, 60000}ms'> \
	<disconnect src-module='router1' src-gate='pppg[1]'/> \
</at> </x>")

**.sender.app[0].generator[0].startTime				= uniform(1s - ${delay}ms, 1s + ${delay}ms)
#**.sender.app[0].generator[0].packetSize			= ${msgLength=${pmtuDecreaseTime} * 10000B}
**.sender.app[0].generator[0].packetSize			= ${msgLength=50MB}
**.sender.app[0].generator[0].packetCount			= 1
**.sender.quic.sendQueueLimit = 2*${msgLength}

# Setze pmtuDecreaseTime ca. 25 RTT dem dem Start des Sendens (1s: Start, RTT=20ms -> 20ms*25 = 500ms -> pmtuDecreaseTime = 1.5s) 
constraint = $pmtuDecreaseTime == 1000 + 50*$delay # || $pmtuDecreaseTime == 60000

output-vector-file = ${resultdir}/cc-limited/delay=${delay}/pmtuDecreaseTime=${pmtuDecreaseTime}/ptb=${ptb}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/cc-limited/delay=${delay}/pmtuDecreaseTime=${pmtuDecreaseTime}/ptb=${ptb}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.sca


[app-limited]

repeat = 100

#**.bottleneckDelay = ${delay=10}ms
#**.bottleneck2Delay = ${delay}ms
#**.oneWayDelay = ${delay=1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55}ms
**.oneWayDelay = ${delay=30, 40}ms
**.router1.ppp[*].queue.dataCapacity = 100 * 2*${delay} kb
#**.router1.ppp[*].queue.dataCapacity = 250 kB

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=3}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=-3}s

*.scenarioManager.script = xml("<x> \
<at t='2'> \
	<disconnect src-module='router2' src-gate='pppg[2]'/> \
</at> </x>")

#**.sender.app[0].generator[0].startTime				= 1s
**.sender.app[0].generator[0].startTime				= uniform(1s - ${delay}ms, 1s + ${delay}ms)
**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
#**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=1000, 500, 250, 166.6667, 125, 100, 83.3333, 71.4286, 62.5, 55.5556, 50, 40, 33.3333, 28.5714, 25, 20, 16.6667, 14.2857, 12.5, 11.1111, 10, 8.3333})*1ms
#**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=158.4893, 100, 63.0957, 39.8107, 25.1189, 15.8489, 10, 6.3096, 3.9811, 2.5119, 1.5849, 1, 0.631, 0.3981, 0.2512, 0.1585, 0.1, 0.0631, 0.0398, 0.0251})*1ms
**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=1000, 630.9573, 398.1072, 251.1886, 158.4893, 100, 63.0957, 39.8107, 25.1189, 15.8489, 10, 6.3096, 3.9811, 2.5119, 1.5849, 1, 0.631, 0.3981, 0.2512, 0.1585, 0.1, 0.0631, 0.0398})*1ms
#**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=0.1585})*1ms
#**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=100})*1ms
#**.sender.app[0].generator[0].stopTime				= (${pktInterval}>100 ? 32s : (${pktInterval}>10 ? 17s : 12s))
**.sender.app[0].generator[0].packetCount			= int(ceil(${sendDuration=(${pktInterval}>100 ? 32000 : (${pktInterval}>10 ? 7000 : (${pktInterval}>1 ? 4000 : 1500 )))} / ${pktInterval}))

#constraint = 	$pc == 0 && (
#					($n == 1 && $t == 0) 
#					|| ($n == 4 && ($t == 0 || $t == 100 || $t == 200)) 
#					|| ($n == 16 && ($t == 0 || $t == 1000 || $t == 2000)))
#				|| $pc > 0 && $n == 1 && $t == 0 && $r == -4
#constraint = $pc > 0 && $n == 1 && $t == 0 && $r == -4

output-vector-file = ${resultdir}/app-limited/delay=${delay}/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/ptb=${ptb}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/delay=${delay}/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/ptb=${ptb}/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_blowup]

repeat = 1

#**.oneWayDelay = ${delay=1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55}ms
**.oneWayDelay = ${delay=10}ms
**.router1.ppp[*].queue.dataCapacity = 100 * 2*${delay} kb
#**.router1.ppp[*].queue.dataCapacity = 250 kB

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=3}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=-3}s

*.scenarioManager.script = xml("<x> \
<at t='2'> \
	<disconnect src-module='router2' src-gate='pppg[2]'/> \
</at> </x>")

**.sender.app[0].numGenerators = 2
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
**.sender.app[0].generator[0].startTime				= 1s
**.sender.app[0].generator[0].packetSize			= 50Mb
**.sender.app[0].generator[0].packetCount			= 1

**.sender.app[0].generator[1].typename				= "TrafficgenSimple"
**.sender.app[0].generator[1].id					= 2
**.sender.app[0].generator[1].startTime				= 1.9s
**.sender.app[0].generator[1].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
**.sender.app[0].generator[1].packetInterval		= exponential(${pktInterval=1000, 500, 250, 166.6667, 125, 100, 83.3333, 71.4286, 62.5, 55.5556, 50, 40, 33.3333, 28.5714, 25, 20, 16.6667, 14.2857, 12.5, 11.1111, 10, 8.3333})*1ms
**.sender.app[0].generator[1].packetCount			= int(ceil(${sendDuration=(${pktInterval}>100 ? 32000 : (${pktInterval}>10 ? 7000 : 4000))} / ${pktInterval}))

output-vector-file = ${resultdir}/app-limited_blowup/delay=${delay}/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/ptb=${ptb}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/delay=${delay}/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/ptb=${ptb}/n=${n}/t=${t}/r=${r}/${repetition}.sca
