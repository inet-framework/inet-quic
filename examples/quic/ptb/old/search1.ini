[General]
network = Bottleneck3
#repeat = 10
sim-time-limit = 500s

seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
result-dir="../../../results/quic/ptb/search1"

**.sender.quic.dplpmtudInvalidSignals**.vector-recording = true
**.router1.ipv4.ip.packetDrop**.vector-recording = true
**.router2.ppp[1].ppp.packetDropIncorrectlyReceived**.vector-recording = true
#**.scalar-recording = false
#**.vector-recording = false
#**.param-recording = false

**.quic.typename = "Quic"

**.sender.quic.useDplpmtud = true
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "OptBinary"
**.sender.quic.dplpmtudUsePtb = true

**.sender.quic.congestionControl = "NewReno"#"No"

**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B


# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"
**.sender.app[0].numGenerators = (${msgLength} == 0 ? 0 : 1)
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
**.sender.app[0].generator[0].startTime				= 0.020128641s # start after sender receives ack for base probe
#**.sender.app[0].generator[0].packetSize			= ${msgLength=0, 1, 10}*1MB
**.sender.app[0].generator[0].packetSize			= ${msgLength=0, 1, 10, 100, 1000, 10000}*1kB
#**.sender.app[0].generator[0].packetSize			= ${msgLength=1, 10}*1MB
**.sender.app[0].generator[0].packetCount			= 1

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

[withoutPMTUD]
**.sender.quic.maxPmtu = 1280B

**.ppp[*].ppp.mtu = 1500B

#constraint = $msgLength > 0

output-vector-file = ${resultdir}/withoutPMTUD/msgLength=${msgLength}/${repetition}.vec
output-scalar-file = ${resultdir}/withoutPMTUD/msgLength=${msgLength}/${repetition}.sca

[withPMTUD]
**.sender.quic.skipPacketNumberForDplpmtudProbePackets = ${skipPacketNumber=true}

**.router1.ppp[1].ppp.mtu = ${mtu=1280..1500 step 4}*1B
**.router2.ppp[0].ppp.mtu = ${mtu}*1B
**.ppp[*].ppp.mtu = 1500B

**.router1.ipv4.icmp.quoteLength = ${ptb=0, 1}*100B + 8B

output-vector-file = ${resultdir}/withPMTUD/msgLength=${msgLength}/mtu=${mtu}/ptb=${ptb}/skipPacketNumber=${skipPacketNumber}/${repetition}.vec
output-scalar-file = ${resultdir}/withPMTUD/msgLength=${msgLength}/mtu=${mtu}/ptb=${ptb}/skipPacketNumber=${skipPacketNumber}/${repetition}.sca

