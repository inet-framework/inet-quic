[General]
#network = Bottleneck2
network = Bottleneck3_
sim-time-limit = 500s
num-rngs = 2
repeat = 1000
seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
result-dir="../../../results/quic/blackhole/lossylink"

**.sender.ppp[0].ppp.txPk:count.scalar-recording = true
**.scalar-recording = false
**.vector-recording = false
**.param-recording = false

# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"
**.sender.app[0].numGenerators = 1
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
**.sender.app[0].generator[0].rng-0 				= 1

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

**.quic.typename = "Quic"
**.sender.quic.useDplpmtud = true
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "OptBinary"
**.sender.quic.dplpmtudUsePtb = false
**.sender.quic.dplpmtudMaxProbes = 100

#**.sender.quic.reducePacketTimeThreshold = ${r=-1,-2,-4}s
#**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=true, false}
#**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 1000000}
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
#**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0} # should not happen

**.sender.quic.congestionControl = "NewReno"

**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B

# router/link config
**.ppp[*].ppp.mtu = 1500B
**.router1.ppp[*].queue.dataCapacity = 500 kB
#**.bottleneck2Link.rng-0 = 0
#**.bottleneckPer = 0
#**.bottleneck2Per = ${p=0.02}
#**.bottleneckDatarate = 100Mbps
#**.bottleneck2Datarate = 100Mbps
#**.bottleneckDelay = ${delay=10ms}
#**.bottleneck2Delay = ${delay}
#**.linkDatarate = 1Gbps

**.oneWayDelay = ${delay=10}ms

**.link1Datarate = 1Gbps
**.link2Datarate = 100Mbps
**.link2_Datarate = 100Mbps
**.link3Datarate = 1Gbps

**.link1Per = 0
**.link2Per = 0
**.link2_.rng-0 = 0
**.link2_Per = ${p=0.02}
**.link3Per = 0


*.scenarioManager.script = xml("<x> \
	<set-channel-param t='0.9' src-module='router1' src-gate='pppg[1]' par='disabled' value='true' /> \
</x>")

#constraint = 	($usePmtuValidator == true && $n < 1000000)
#				|| ($usePmtuValidator == true && $n == 1000000 && $t == 0)
#				|| ($usePmtuValidator == false && $n == 1 && $t == 0 && $r == -1)

[cc-limited]
repeat = 10

**.sender.app[0].generator[0].packetSize			= ${msgLength=32MB}
**.sender.app[0].generator[0].startTime				= uniform(1s - ${delay}, 1s + ${delay})
**.sender.app[0].generator[0].packetCount			= 1
**.sender.quic.sendQueueLimit = 2*${msgLength}

[cc-limitedWith]
extends = cc-limited

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=true}
**.sender.quic.reducePacketTimeThreshold = ${r=-1,-2,-4}s
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 1000000}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

output-vector-file = ${resultdir}/cc-limited/msgLength=${msgLength}/p=${p}/usePmtuValidator=${usePmtuValidator}/r=${r}/n=${n}/t=${t}/${repetition}.vec
output-scalar-file = ${resultdir}/cc-limited/msgLength=${msgLength}/p=${p}/usePmtuValidator=${usePmtuValidator}/r=${r}/n=${n}/t=${t}/${repetition}.sca

[cc-limitedWithout]
extends = cc-limited

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=false}

output-vector-file = ${resultdir}/cc-limited/msgLength=${msgLength}/p=${p}/usePmtuValidator=${usePmtuValidator}/${repetition}.vec
output-scalar-file = ${resultdir}/cc-limited/msgLength=${msgLength}/p=${p}/usePmtuValidator=${usePmtuValidator}/${repetition}.sca


[app-limited]

**.sender.app[0].generator[0].startTime				= 1s
**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=1000, 100, 50, 25, 16.6667, 12.5, 10, 8.3333, 7.1429, 6.25, 5.5556, 5, 4.5455, 4.1667, 3.8462, 3.5714, 3.3333, 3.125, 2.9412, 2.7778, 2.6316, 2.5, 2.381, 2.2727, 2.1739, 2.0833, 2, 1.9231})*1ms
# send for about 60 s, but with the same number of messages each time
**.sender.app[0].generator[0].packetCount			= int(ceil(${sendDuration=60000} / ${pktInterval}))

[app-limitedWith]
extends = app-limited

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=true}
**.sender.quic.reducePacketTimeThreshold = ${r=-1,-2,-4}s
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

[app-limitedWith1]
extends = app-limitedWith
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1}
output-vector-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limitedWith2]
extends = app-limitedWith
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=2}
output-vector-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limitedWith3]
extends = app-limitedWith
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1000000}
output-vector-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limitedWithout]
extends = app-limited

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=false}

output-vector-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/${repetition}.sca


[app-limited_blowup]

**.sender.app[0].numGenerators = 2

**.sender.app[0].generator[0].startTime				= 1s
**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=1000, 100, 50, 25, 16.6667, 12.5, 10, 8.3333, 7.1429, 6.25, 5.5556, 5, 4.5455, 4.1667, 3.8462, 3.5714, 3.3333, 3.125, 2.9412, 2.7778, 2.6316, 2.5, 2.381, 2.2727, 2.1739, 2.0833, 2, 1.9231})*1ms
# send for about 60 s, but with the same number of messages each time
**.sender.app[0].generator[0].packetCount			= int(ceil(${sendDuration=60000} / ${pktInterval}))

**.sender.app[0].generator[1].typename				= "TrafficgenSimple"
**.sender.app[0].generator[1].id					= 2
**.sender.app[0].generator[1].packetSize			= 50Mb
**.sender.app[0].generator[1].startTime				= 0.1s
**.sender.app[0].generator[1].packetCount			= 1

[app-limited_blowupWith]
extends = app-limited_blowup

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=true}
**.sender.quic.reducePacketTimeThreshold = ${r=-1,-2,-4}s
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

[app-limited_blowupWith1]
extends = app-limited_blowupWith
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1}
output-vector-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limited_blowupWith2]
extends = app-limited_blowupWith
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=2}
output-vector-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limited_blowupWith3]
extends = app-limited_blowupWith
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1000000}
output-vector-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_blowupWithout]
extends = app-limited_blowup

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=false}

output-vector-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/msgLength=${msgLength}/pktInterval=${pktInterval}/sendDuration=${sendDuration}/p=${p}/usePmtuValidator=${usePmtuValidator}/${repetition}.sca
