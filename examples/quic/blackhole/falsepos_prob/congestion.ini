[General]
network = Bottleneck
sim-time-limit = 10s
repeat = 100
seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

#output-vector-file = ${resultdir}/falsepos_congestion2-pktInterval=${pktInterval},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.vec
#output-scalar-file = ${resultdir}/falsepos_congestion2-pktInterval=${pktInterval},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.sca

**.sender.quic.dplpmtud**.vector-recording = true
**.sender.quic.pmtuValidator**.vector-recording = true
**.scalar-recording = false
**.vector-recording = false

# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"
**.sender.app[0].numGenerators = 1
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
#**.sender.app[0].generator[0].packetSize			= intuniform(1002, 1442)*1B
**.sender.app[0].generator[0].startTime				= 1s
#**.sender.app[0].generator[0].stopTime				= 10s
#**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=100, 50, 33.33, 25, 20, 16.67, 14.29, 12.5, 11.11, 10, 5, 3.333, 2.5, 2})*1ms

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

**.quic.typename = "Quic"
**.sender.quic.useDplpmtud = true
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "Down"
**.sender.quic.dplpmtudUsePtb = false
**.sender.quic.dplpmtudMaxProbes = 100
#**.sender.quic.reduceTlpSize = ${reduceTlpSize=0,1}
#**.sender.quic.reduceTlpSizeOnlyIfPmtuInvalidPossible = false

**.sender.quic.reducePacketTimeThreshold = ${reducePacketTimeThreshold=-1,-2}s
**.sender.quic.pmtuValidatorLostPacketsThreshold = 1000000
**.sender.quic.pmtuValidatorTimeThreshold = 0ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = 0

**.sender.quic.congestionControl = "NewReno"

**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B

# router/link config
**.ppp[*].ppp.mtu = 1500B
**.router1.ppp[*].queue.dataCapacity = 250 kB
**.bottleneckPer = 0
**.bottleneckDatarate = 100Mbps
**.bottleneckDelay = ${delay=10ms}
**.linkDatarate = 1Gbps

########## UDP for random traffic
**.bulkSender.numApps = 1
**.bulkReceiver.numApps = 1
**.bulk*.app[*].typename = "UdpBasicApp"
**.bulk*.app[*].localPort = 100#+index
**.bulk*.app[*].destPort = 100
**.bulk*.app[*].messageLength = 1472B
**.bulkSender.app[*].sendInterval = 12us # with 1500 B packets: 1500B / 12us = 1 Gb/s; buffer fill speed is: 1 Gb/s - 100 Mb/s = 900 Mb/s; 250 KB buffer full after: 250KB / 900Mb/s = 2.222 ms 
**.bulkReceiver.app[*].sendInterval = 0s
**.bulkSender.app[*].startTime = 2s# + index*2s
**.bulkSender.app[*].stopTime = 2s + ${congestionDuration=50}ms# + index*2s # send for 50 ms; buffer full from 5.002222 s to 5.05 s

**.bulkSender.app[*].destAddresses = "bulkReceiver"
**.bulkReceiver.app[0].destAddresses = ""


[bulk]

output-vector-file = ${resultdir}/congestion_bulk-msgLength=${msgLength},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.vec
output-scalar-file = ${resultdir}/congestion_bulk-msgLength=${msgLength},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.sca

**.sender.app[0].generator[0].packetSize			= ${msgLength=50MB}
**.sender.app[0].generator[0].startTime				= uniform(1s - ${delay}, 1s + ${delay})
**.sender.app[0].generator[0].stopTime				= 2s
**.sender.app[0].generator[0].packetInterval        = 3s
**.sender.quic.sendQueueLimit = 2*${msgLength}

[fixed-sized]

output-vector-file = ${resultdir}/congestion_fixed-msgLength=${msgLength},pktInterval=${pktInterval},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.vec
output-scalar-file = ${resultdir}/congestion_fixed-msgLength=${msgLength},pktInterval=${pktInterval},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.sca

**.sender.app[0].generator[0].packetSize			= ${msgLength=1400B, 1500B, 3000B, 15000B}
**.sender.app[0].generator[0].stopTime				= 5s
**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=100, 50, 33.33, 25, 20, 16.67, 14.29, 12.5, 11.11, 10, 5, 3.333, 2.5, 2})*1ms

[variable-sized]

output-vector-file = ${resultdir}/congestion_variable-pktInterval=${pktInterval},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.vec
output-scalar-file = ${resultdir}/congestion_variable-pktInterval=${pktInterval},congestionDuration=${congestionDuration},reducePacketTimeThreshold=${reducePacketTimeThreshold}-${repetition}.sca

**.sender.app[0].generator[0].packetSize			= intuniform(1042, 1442)*1B
**.sender.app[0].generator[0].stopTime				= 5s
**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=100, 50, 33.33, 25, 20, 16.67, 14.29, 12.5, 11.11, 10, 5, 3.333, 2.5, 2})*1ms


