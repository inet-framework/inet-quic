[General]
#network = Bottleneck2
network = Bottleneck3_
sim-time-limit = 500s
num-rngs = 2
repeat = 100
seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
result-dir="../../../results/quic/blackhole/outage"

#**.sender.quic.dplpmtud**.vector-recording = true
#**.sender.quic.pmtuValidator**.vector-recording = true
**.sender.ppp[0].ppp.txPk:count.scalar-recording = true
#**.sender.ppp[0].ppp.txPk**.vector-recording = true
**.scalar-recording = false
**.vector-recording = false
**.param-recording = false

# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"


**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

**.quic.typename = "Quic"
**.sender.quic.useDplpmtud = true
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "OptBinary"
**.sender.quic.dplpmtudUsePtb = false
**.sender.quic.dplpmtudMaxProbes = 100
#**.sender.quic.reduceTlpSize = ${reduceTlpSize=0,1,2,3}

**.sender.quic.reducePacketTimeThreshold = ${r=-1, -2, -4}s


**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B

# router/link config
**.ppp[*].ppp.mtu = 1500B
#**.router1.ppp[*].queue.dataCapacity = 500 kB
#**.bottleneck2Link.rng-0 = 0
#**.bottleneckPer = 0
#**.bottleneck2Per = ${p=0.5}#0.1, 0.3, 0.5, 0.7, 0.9}
#**.bottleneckDatarate = 100Mbps
#**.bottleneck2Datarate = 100Mbps
#**.bottleneckDelay = ${delay=10ms}
#**.bottleneck2Delay = ${delay}
#**.linkDatarate = 1Gbps

**.oneWayDelay = ${delay=10, 20}ms
**.router1.ppp[*].queue.dataCapacity = 100 * 2*${delay} kb

**.link1Datarate = 1Gbps
**.link2Datarate = 100Mbps
**.link2_Datarate = 100Mbps
**.link3Datarate = 1Gbps

**.link1Per = 0
**.link2Per = 0
**.link2_.rng-0 = 0
**.link2_Per = ${p=0.5}
**.link3Per = 0

*.scenarioManager.script = xml("<x> \
	<set-channel-param t='2' src-module='router1' src-gate='pppg[1]' par='disabled' value='true' /> \
	<set-channel-param t='${outageStop=3}' src-module='router1' src-gate='pppg[1]' par='disabled' value='false' /> \
</x>")

#[cc-limited]
#repeat = 10
#
#**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=true, false}
##**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 5, 10}
#**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 3, 4, 1000000}
##**.sender.quic.pmtuValidatorTimeThreshold = ${t=0, 10, 20, 30, 100}ms
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=0, 10, 20, 40, 60, 80, 100}ms
#**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0, 1}
#
#**.sender.app[0].numGenerators = 1
#
#**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
#**.sender.app[0].generator[0].id					= 1
#**.sender.app[0].generator[0].startTime				= uniform(1s - ${delay}, 1s + ${delay})
#**.sender.app[0].generator[0].rng-0 				= 1
#**.sender.app[0].generator[0].packetSize			= ${msgLength=200Mb}
#**.sender.app[0].generator[0].packetCount			= 1
#**.sender.quic.sendQueueLimit = 2*${msgLength}
#
#output-vector-file = ${resultdir}/cc-limited/msgLength=${msgLength}/usePmtuValidator=${usePmtuValidator}/p=${p}/pc=${pc}/r=${r}/n=${n}/t=${t}/${repetition}.vec
#output-scalar-file = ${resultdir}/cc-limited/msgLength=${msgLength}/usePmtuValidator=${usePmtuValidator}/p=${p}/pc=${pc}/r=${r}/n=${n}/t=${t}/${repetition}.sca
#
#constraint = 	($usePmtuValidator == true && 1 < $n && $n < 1000000)
#				|| ($usePmtuValidator == true && $n == 1 && $t == 0)
#				|| ($usePmtuValidator == true && $n == 1000000 && $t == 0)
#				|| ($usePmtuValidator == false && $n == 1 && $t == 0 && $r == -1 && $pc == 0)
#
#[app-limited]
#
#**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=true, false}
##**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 5, 10}
#**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 3, 4, 1000000}
##**.sender.quic.pmtuValidatorTimeThreshold = ${t=0, 10, 20, 30, 100}ms
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=0, 10, 20, 40, 60, 80, 100}ms
#**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0, 1}
#
#**.sender.quic.congestionControl = ${cc="No", "NewReno"}
#
#**.sender.app[0].numGenerators = 1
#
#**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
#**.sender.app[0].generator[0].id					= 1
#**.sender.app[0].generator[0].startTime				= 1s
#**.sender.app[0].generator[0].rng-0 				= 1
#**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
#**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=4, 2, 1})*1ms
#**.sender.app[0].generator[0].packetCount			= ${numMsgs = int(ceil(3000 / $pktInterval))}
#
#output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pktInterval=${pktInterval}/cc=${cc}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/${repetition}.vec
#output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pktInterval=${pktInterval}/cc=${cc}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/${repetition}.sca
#
#constraint = 	($usePmtuValidator == true && 1 < $n && $n < 1000000)
#				|| ($usePmtuValidator == true && $n == 1 && $t == 0)
#				|| ($usePmtuValidator == true && $n == 1000000 && $t == 0)
#				|| ($usePmtuValidator == false && $n == 1 && $t == 0 && $r == -1 && $pc == 0)

[app-limited_blowup]
repeat = 1000

**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

**.sender.quic.congestionControl = "NewReno"

**.sender.app[0].numGenerators = 2

**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
**.sender.app[0].generator[0].packetSize			= 50Mb
**.sender.app[0].generator[0].startTime				= 1s
**.sender.app[0].generator[0].packetCount			= 1

**.sender.app[0].generator[1].typename				= "TrafficgenSimple"
**.sender.app[0].generator[1].id					= 2
**.sender.app[0].generator[1].startTime				= 2s
**.sender.app[0].generator[1].rng-0 				= 1
**.sender.app[0].generator[1].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
**.sender.app[0].generator[1].packetInterval		= exponential(${pktInterval=158.4893, 100, 63.0957, 39.8107, 25.1189, 15.8489, 10, 6.3096, 3.9811, 2.5119, 1.5849, 1, 0.631, 0.3981, 0.2512, 0.1585, 0.1, 0.0631, 0.0398, 0.0251})*1ms
#**.sender.app[0].generator[1].packetInterval		= exponential(${pktInterval=0.0251})*1ms
**.sender.app[0].generator[1].packetCount			= ${numMsgs = int(ceil(2000 / $pktInterval))}

#constraint = 	($usePmtuValidator == false && $n == 1 && $t == 0 && $r == -1 && $pc == 0)
#				|| ($usePmtuValidator == true &&
#					(($n == 1 && $t == 0)
#					|| ($n == 2 && ($t == 0 || $t == 20 || $t == 60))
#					|| ($n == 4 && $t == 0)
#					|| ($n == 1000000 && $t == 0)
#					)
#				)

[app-limited_blowup_without]
extends = app-limited_blowup
#constraint = 	($usePmtuValidator == false && $n == 1 && $t == 0 && $r == -1 && $pc == 0)

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=false}
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms

output-vector-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.sca

[app-limited_blowup_with]
extends = app-limited_blowup

**.sender.quic.dplpmtudUsePmtuValidator = ${usePmtuValidator=true}

[app-limited_blowup_with_n1]
extends = app-limited_blowup_with
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
output-vector-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.sca
[app-limited_blowup_with_n2_1]
extends = app-limited_blowup_with
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=2}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0, 20}ms
output-vector-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.sca
[app-limited_blowup_with_n2_2]
extends = app-limited_blowup_with
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=2}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=40, 60}ms
output-vector-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.sca
[app-limited_blowup_with_n4]
extends = app-limited_blowup_with
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=4}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
output-vector-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.sca
[app-limited_blowup_with_ninf]
extends = app-limited_blowup_with
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1000000}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
output-vector-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/d=${delay}/msgLength=${msgLength}/pktInterval=${pktInterval}/usePmtuValidator=${usePmtuValidator}/n=${n}/t=${t}/p=${p}/reducePacketTimeThreshold=${r}/outageStop=${outageStop}/pc=${pc}/${repetition}.sca
