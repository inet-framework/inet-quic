[General]
network = Bottleneck
sim-time-limit = 500s
#num-rngs = 2
repeat = 10
seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
result-dir="../../../results/quic/blackhole/congestion"


**.sender.quic.dplpmtud**.vector-recording = true
**.sender.quic.pmtuValidator**.vector-recording = true
**.sender.quic.usedMaxQuicPacketSize**.vector-recording = true
**.sender.ppp[0].ppp.txPk:count.scalar-recording = true
**.sender.ppp[0].ppp.txPk**.vector-recording = true
**.scalar-recording = false
**.vector-recording = false
**.param-recording = false

# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"
**.sender.app[0].numGenerators = 1
#**.sender.app[0].generator[0].rng-0 				= 0

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

**.quic.typename = "Quic"
**.sender.quic.useDplpmtud = true
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "OptBinary"
**.sender.quic.dplpmtudUsePtb = false
**.sender.quic.dplpmtudMaxProbes = 100

**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = 0

**.sender.quic.congestionControl = "NewReno"

**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B

# router/link config
**.ppp[*].ppp.mtu = 1500B
**.router1.ppp[*].queue.dataCapacity = 250 kB
**.bottleneckPer = 0
**.bottleneckDatarate = 100Mbps
**.bottleneckDelay = ${delay=10ms}
**.linkDatarate = 1Gbps

**.sender1.app[*].handler.connectAddress = "receiver1"
**.sender1.app[0].generator[0].startTime			= uniform(2s - ${delay}, 2s + ${delay})

**.sender2.app[*].handler.connectAddress = "receiver2"
**.sender2.app[0].generator[0].startTime			= uniform(2.2s - ${delay}, 2.2s + ${delay})

**.sender3.app[*].handler.connectAddress = "receiver3"
**.sender3.app[0].generator[0].startTime			= uniform(2.4s - ${delay}, 2.4s + ${delay})

**.sender4.app[*].handler.connectAddress = "receiver4"
**.sender4.app[0].generator[0].startTime			= uniform(2.6s - ${delay}, 2.6s + ${delay})

**.sender*.numApps = 1
**.sender*.app[*].typename = "TrafficgenCompound"
**.sender*.app[*].handler.typename = "QuicTrafficgen"
**.sender*.app[*].handler.localPort = 1001
**.sender*.app[*].handler.connectPort = 1000
**.sender*.app[0].numGenerators = 1
**.sender*.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender*.app[0].generator[0].id					= 1
#**.sender4.app[0].generator[0].rng-0 				= 1
**.sender*.app[0].generator[0].packetSize			= ${msgLength2=300Mb}
**.sender*.app[0].generator[0].packetCount			= 1
**.sender*.quic.sendQueueLimit = 2*${msgLength2}

**.receiver*.numApps = 1
**.receiver*.app[*].typename = "QuicDiscardServer"
**.receiver*.app[*].localAddress = ""
**.receiver*.app[*].localPort = 1000

#constraint = 	($usePmtuValidator == true)
#				|| ($usePmtuValidator == false && $n == 1 && $t == 0 && $reducePacketTimeThreshold == -1)

[without]
**.sender.quic.dplpmtudUsePmtuValidator = false

[with]
**.sender.quic.dplpmtudUsePmtuValidator = true
#**.sender.quic.reducePacketTimeThreshold = ${r=-1, -2, -4}s
**.sender.quic.reducePacketTimeThreshold = ${r=-1}s

[with_t0]
extends = with
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 4}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms

[with_tx]
extends = with
**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=2, 4}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=20, 60}ms

[cc-limited]
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
**.sender.app[0].generator[0].startTime				= 3s
**.sender.app[0].generator[0].packetSize			= 200Mb
**.sender.app[0].generator[0].packetCount			= 1

[app-limited]
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1
**.sender.app[0].generator[0].startTime				= 3s
**.sender.app[0].generator[0].packetSize			= intuniform(1042,1442)*1B
#**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=1000, 200, 100, 20, 10, 2, 1, 0.2, 0.1, 0.02, 0.01})*1ms
**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=1000, 200, 100, 20, 10, 2, 1, 0.2, 0.1})*1ms
**.sender.app[0].generator[0].packetCount			= ${numMsgs = int(ceil(10000 / $pktInterval))}

[app-limited_blowup]
extends = app-limited

**.sender.app[0].numGenerators = 2

**.sender.app[0].generator[1].typename				= "TrafficgenSimple"
**.sender.app[0].generator[1].id					= 2
**.sender.app[0].generator[1].packetSize			= 50Mb
**.sender.app[0].generator[1].startTime				= 1s
**.sender.app[0].generator[1].packetCount			= 1

[cc-limited_with_t0]
extends = cc-limited, with_t0

output-vector-file = ${resultdir}/cc-limited/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/cc-limited/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.sca

[cc-limited_with_tx]
extends = cc-limited, with_tx

output-vector-file = ${resultdir}/app-limited/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.sca

[cc-limited_without]
extends = cc-limited, without

output-vector-file = ${resultdir}/app-limited/withoutPmtuValidator/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/withoutPmtuValidator/${repetition}.sca

[app-limited_with_t0]
extends = app-limited, with_t0

output-vector-file = ${resultdir}/app-limited/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_with_tx]
extends = app-limited, with_tx

output-vector-file = ${resultdir}/app-limited/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_without]
extends = app-limited, without

output-vector-file = ${resultdir}/app-limited/pktInterval=${pktInterval}/withoutPmtuValidator/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/pktInterval=${pktInterval}/withoutPmtuValidator/${repetition}.sca

[app-limited_blowup_with_t0]
extends = app-limited_blowup, with_t0

output-vector-file = ${resultdir}/app-limited_blowup/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_blowup_with_tx]
extends = app-limited_blowup, with_tx

output-vector-file = ${resultdir}/app-limited_blowup/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/pktInterval=${pktInterval}/withPmtuValidator/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_blowup_without]
extends = app-limited_blowup, without

output-vector-file = ${resultdir}/app-limited_blowup/pktInterval=${pktInterval}/withoutPmtuValidator/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited_blowup/pktInterval=${pktInterval}/withoutPmtuValidator/${repetition}.sca
