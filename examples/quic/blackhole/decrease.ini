[General]
#network = Bottleneck2
network = Bottleneck3_
sim-time-limit = 500s

seed-set = ${repetition}
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
result-dir="../../../results/quic/blackhole/decrease"

**.sender.quic.dplpmtudInvalidSignals**.vector-recording = true
**.router1.ipv4.ip.packetDrop**.vector-recording = true
**.router2.ppp[0].ppp.packetDropIncorrectlyReceived**.vector-recording = true
**.scalar-recording = false
**.vector-recording = false
**.param-recording = false

# quic apps
**.sender.numApps = 1
**.sender.app[*].typename = "TrafficgenCompound"
**.sender.app[*].handler.typename = "QuicTrafficgen"
**.sender.app[*].handler.localPort = 1001
**.sender.app[*].handler.connectPort = 1000
**.sender.app[*].handler.connectAddress = "receiver"
**.sender.app[0].numGenerators = 1
**.sender.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender.app[0].generator[0].id					= 1

**.receiver.numApps = 1
**.receiver.app[*].typename = "QuicDiscardServer"
**.receiver.app[*].localAddress = ""
**.receiver.app[*].localPort = 1000

**.quic.typename = "Quic"
**.sender.quic.useDplpmtud = true
**.sender.quic.dplpmtudMinPmtu = 1280
**.sender.quic.dplpmtudCandidateSequence = "OptBinary"
**.sender.quic.dplpmtudUsePtb = false

**.sender.quic.reducePacketTimeThreshold = ${r=-1,-2,-4}s
#**.sender.quic.reducePacketTimeThreshold = ${r=-2}s
#**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0, 1}

**.sender.quic.congestionControl = "NewReno"#"No"

**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B
**.quic.initialMaxStreamDataBidiLocal = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B

**.router1.ppp[2].ppp.mtu = 1300B
#**.router2.ppp[2].ppp.mtu = 1300B
**.router2.ppp[1].ppp.mtu = 1300B
**.ppp[*].ppp.mtu = 1500B


[cc-limited]

repeat = 10

#**.bottleneckDelay = ${delay=1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55}ms
#**.bottleneck2Delay = ${delay}ms
**.oneWayDelay = ${delay=1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55}ms
**.router1.ppp[*].queue.dataCapacity = 100 * 2*${delay} kb

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=2}
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=0, -1, -2, -3, -4, -5, -6}s
**.sender.quic.pmtuValidatorTimeThreshold = ${t=\
	(2*$delay), (6*$delay+25), (10*$delay+2*25),\
	(4*$delay+25), (12*$delay+4*25), (20*$delay+7*25),\
	(8*$delay+3*25), (24*$delay+10*25), (40*$delay+17*25) \
}*1ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

*.scenarioManager.script = xml("<x> \
<at t='${pmtuDecreaseTime=1050, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3250, 3500, 3750}ms'> \
	<disconnect src-module='router1' src-gate='pppg[1]'/> \
</at> </x>")

**.sender.app[0].generator[0].startTime				= uniform(1s - ${delay}ms, 1s + ${delay}ms)
**.sender.app[0].generator[0].packetSize			= ${msgLength=${pmtuDecreaseTime} * 10000B}
**.sender.app[0].generator[0].packetCount			= 1
**.sender.quic.sendQueueLimit = 2*${msgLength}

# Setze pmtuDecreaseTime ca. 25 RTT dem dem Start des Sendens (1s: Start, RTT=20ms -> 20ms*25 = 500ms -> pmtuDecreaseTime = 1.5s) 
#constraint = (($n == 1 && $t == 0) || ($n > 1)) && ($pmtuDecreaseTime == 1000 + 50*$bulkDelay)
#constraint = $pc > 0 && $r == -4 && $pmtuDecreaseTime == 1000 + 50*$delay
constraint = $pmtuDecreaseTime == 1000 + 50*$delay

output-vector-file = ${resultdir}/cc-limited/delay=${delay}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/cc-limited/delay=${delay}/pc=${pc}/n=${n}/t=${t}/r=${r}/${repetition}.sca


[app-limited]

repeat = 1000

#**.bottleneckDelay = ${delay=10}ms
#**.bottleneck2Delay = ${delay}ms
**.oneWayDelay = ${delay=20}ms
#**.router1.ppp[*].queue.dataCapacity = 250 kB
**.router1.ppp[*].queue.dataCapacity = 500 kB

#**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 2, 4, 16}
#**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=4}
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=0, 100, 200, 1000, 2000}ms
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=10000}ms
#**.sender.quic.pmtuValidatorTimeThreshold = ${t= (${n}==1 ? 0 : 100,200) }ms
#**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

*.scenarioManager.script = xml("<x> \
<at t='2'> \
	<disconnect src-module='router1' src-gate='pppg[1]'/> \
</at> </x>")

**.sender.app[0].generator[0].startTime				= 1s
#**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
#**.sender.app[0].generator[0].packetSize			= ${msgLength=1400}*1B
**.sender.app[0].generator[0].packetInterval		= exponential(${pktInterval=1000, 500, 250, 166.6667, 125, 100, 83.3333, 71.4286, 62.5, 55.5556, 50, 45.4545, 41.6667, 38.4615, 35.7143, 33.3333, 31.25, 29.4118, 27.7778, 26.3158, 25, 23.8095, 22.7273, 21.7391, 20.8333, 20, 19.2308, 18.5185, 17.8571, 17.2414, 16.6667, 16.129, 15.625, 15.1515, 14.7059, 14.2857, 13.8889, 13.5135, 13.1579, 12.8205, 12.5, 12.1951, 11.9048, 11.6279, 11.3636, 11.1111, 10.8696, 10.6383, 10.4167, 10.2041, 10, 9.8039, 9.6154, 9.434, 9.2593, 9.0909})*1ms
**.sender.app[0].generator[0].stopTime				= (${pktInterval}>250 ? 100s : (${pktInterval}>100 ? 32s : (${pktInterval}>10 ? 7s : 4s)))

#constraint = 	$pc == 0 && (
#					($n == 1 && $t == 0) 
#					|| ($n == 4 && ($t == 0 || $t == 100 || $t == 200)) 
#					|| ($n == 16 && ($t == 0 || $t == 1000 || $t == 2000)))
#				|| $pc > 0 && $n == 1 && $t == 0 && $r == -4
#constraint = $pc > 0 && $n == 1 && $t == 0 && $r == -4

[app-limited_t0]
extends = app-limited

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=1, 4, 16}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

[app-limited_t0_1]
extends = app-limited_t0
**.sender.app[0].generator[0].packetSize			= ${msgLength=1400}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limited_t0_2]
extends = app-limited_t0
**.sender.app[0].generator[0].packetSize			= ${msgLength=1500}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limited_t0_3]
extends = app-limited_t0
**.sender.app[0].generator[0].packetSize			= ${msgLength=3000}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limited_t0_4]
extends = app-limited_t0
**.sender.app[0].generator[0].packetSize			= ${msgLength=intuniform(1042,1442)}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_pc]
extends = app-limited

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=2}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=10000}ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=1}

**.sender.app[0].generator[0].stopTime				= (${pktInterval}>100 ? 32s : (${pktInterval}>10 ? 17s : 12s))

**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500, 3000, intuniform(1042,1442)}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_n4]
extends = app-limited

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=4}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=100, 200}ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

[app-limited_n4_1]
extends = app-limited_n4
**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limited_n4_2]
extends = app-limited_n4
**.sender.app[0].generator[0].packetSize			= ${msgLength=3000, intuniform(1042,1442)}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca

[app-limited_n16]
extends = app-limited

**.sender.quic.pmtuValidatorLostPacketsThreshold = ${n=16}
**.sender.quic.pmtuValidatorTimeThreshold = ${t=1000, 2000}ms
#**.sender.quic.pmtuValidatorTimeThreshold = ${t=0}ms
**.sender.quic.pmtuValidatorInvalidOnPersistentCongestion = ${pc=0}

**.sender.app[0].generator[0].stopTime				= (${pktInterval}>100 ? 72s : (${pktInterval}>10 ? 7s : 4s))

[app-limited_n16_1]
extends = app-limited_n16
**.sender.app[0].generator[0].packetSize			= ${msgLength=1400, 1500}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca
[app-limited_n16_2]
extends = app-limited_n16
**.sender.app[0].generator[0].packetSize			= ${msgLength=3000, intuniform(1042,1442)}*1B
output-vector-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.vec
output-scalar-file = ${resultdir}/app-limited/msgLength=${msgLength}/pc=${pc}/pktInterval=${pktInterval}/n=${n}/t=${t}/r=${r}/${repetition}.sca

