[General]
network = shared_link
repeat = 2

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

# Set the quic module, which can be in the StandardHost anything that implements IQuic, to our concrete Quic implementation
**.quic.typename = "Quic"

# Avoid flow control
**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B

**.bottleneckDelay = ${delay=10}ms #${delay=1ms, 10ms, 100ms}
**.bottleneckDatarate = ${bw=10}Mbps #${bw=100Mbps, 10Mbps}

**.ppp[*].ppp.queue.packetCapacity = ${q=24} #${q=10,100,1000}
**.ppp[*].ppp.mtu = ${mtu=1280}B #${mtu=1280,1452,1500,9000}B

**.sender*.numApps = 1
**.sender*.app[*].typename = "TrafficgenCompound"
**.sender*.app[0].numGenerators = 1

**.sender*.app[0].generator[0].typename				= "TrafficgenSimple"
**.sender*.app[0].generator[0].id					= 0
**.sender*.app[0].generator[0].packetSize			= 15000B
**.sender*.app[0].generator[0].packetInterval		= 0ms
**.sender*.app[0].generator[0].ordered				= false
**.sender1.app[0].generator[0].startTime			= 2s
**.sender2.app[0].generator[0].startTime			= 40s
**.sender3.app[0].generator[0].startTime			= 80s
**.sender1.app[0].generator[0].stopTime			= 120s
**.sender2.app[0].generator[0].stopTime			= 160s
**.sender3.app[0].generator[0].stopTime			= 198s

**.sender*.app[*].handler.typename = "QuicTrafficgen"
**.sender*.app[*].handler.localPort = 1001
**.sender*.app[*].handler.connectPort = 1000
**.sender1.app[*].handler.connectAddress = "receiver1"
**.sender2.app[*].handler.connectAddress = "receiver2"
**.sender3.app[*].handler.connectAddress = "receiver3"

**.sender*.quic.accurateIncreaseInNewRenoCongestionAvoidance = ${accurateInc=true,false}
**.sender*.quic.sendQueueLimit = ${ql=100000}
# sendBufferUnsentData_min = sendQueueLimit * sendQueueLowWaterRation - cwnd_max > 0
# <==> sendQueueLimit > cwnd_max/LowWaterRatio = (BDP + RouterBuffer)/LowWaterRatio
**.sender*.quic.sendQueueLowWaterRatio = .8
**.quic.bundleAckForNonAckElicitingPackets = true

**.receiver*.numApps = 1
**.receiver*.app[*].typename = "QuicDiscardServer"
**.receiver*.app[*].localAddress = ""
**.receiver*.app[*].localPort = 1000

#**.server.quic.receiveGoodputStatStartTime = 5s
#**.server.quic.receiveGoodputStatEndTime = 10s

**.receiver*.quic.numReceivedAckElicitingsBeforeAck = 2

########## UDP for random traffic
**.traffic*.numApps = 1
**.traffic*.app[*].typename = "UdpBasicApp"
**.traffic*.app[0].localPort = 100
**.traffic*.app[0].destPort = 100
**.traffic*.app[0].messageLength = int(uniform(100B,1000B))
**.traffic*.app[0].sendInterval = uniform(25ms,100ms)
**.traffic*.app[0].startTime = 0s
**.traffic*.app[0].stopTime = 200s #${$stopTime+1s}

**.trafficGenerator.app[0].destAddresses = "trafficConsumer"
**.trafficConsumer.app[0].destAddresses = ""
