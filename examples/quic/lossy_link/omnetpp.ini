[General]
#network = lossy_link
#network = lossy_link_oneway
network = lossy_link_shared
#repeat = 2

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

# Set the quic module, which can be in the StandardHost anything that implements IQuic, to our concrete Quic implementation
**.quic.typename = "Quic"

# Avoid flow control
**.quic.initialMaxData = 4294967295B
**.quic.initialMaxStreamDataBidiRemote = 4294967295B
**.quic.initialMaxStreamDataUni = 4294967295B

**.linkDelay = 1ms
**.linkDatarate = ${d=100000}Mbps
#**.linkPer = 0
#**.lossyLinkPer = 0.01

**.ppp[*].ppp.queue.packetCapacity = 200
**.ppp[*].ppp.mtu = ${mtu=1280}B

**.client.numApps = 1
**.client.app[*].typename = "TrafficgenCompound"
**.client.app[0].numGenerators = 1

**.client.app[0].generator[0].typename				= "TrafficgenSimple"
**.client.app[0].generator[0].id					= 0
**.client.app[0].generator[0].packetSize			= 15000B
**.client.app[0].generator[0].startTime			= 2s
#**.client.app[0].generator[0].packetCount			= 100
**.client.app[0].generator[0].stopTime				= 11s #${stopTime=11s}
**.client.app[0].generator[0].packetInterval		= 0ms
**.client.app[0].generator[0].ordered				= false
#**.client.app[0].generator[0].packetBurstSize		= 1

**.client.app[*].handler.typename = "QuicTrafficgen"
**.client.app[*].handler.localPort = 1001
**.client.app[*].handler.connectPort = 1000
**.client.app[*].handler.connectAddress = "server"

**.client.quic.sendQueueLimit = 50000000B
# sendBufferUnsentData_min = sendQueueLimit * sendQueueLowWaterRation - cwnd_max > 0
# <==> sendQueueLimit > cwnd_max/LowWaterRatio = (BDP + RouterBuffer)/LowWaterRatio
**.client.quic.sendQueueLowWaterRatio = .8
**.client.quic.accurateIncreaseInNewRenoCongestionAvoidance = ${accurateInc=true}#,false}
**.quic.bundleAckForNonAckElicitingPackets = false

**.client.quic.sendLossRate = .01
**.client.quic.periodicSendLoss = ${periodicLoss=true,false}

**.server.numApps = 1
**.server.app[*].typename = "QuicDiscardServer"
**.server.app[*].localAddress = ""
**.server.app[*].localPort = 1000

#**.server.quic.receiveGoodputStatStartTime = 5s
#**.server.quic.receiveGoodputStatEndTime = 10s

**.server.quic.numReceivedAckElicitingsBeforeAck = ${pktBeforeAck=1,2}


########## UDP for random traffic
**.random*.numApps = 1
**.random*.app[*].typename = "UdpBasicApp"
**.random*.app[0].localPort = 100
**.random*.app[0].destPort = 100
**.random*.app[0].messageLength = int(uniform(100B,1000B))
**.random*.app[0].sendInterval = uniform(25ms,100ms)
**.random*.app[0].startTime = 1s
**.random*.app[0].stopTime = 12s #${$stopTime+1s}

**.randomCli.app[0].destAddresses = "randomSrv"
**.randomSrv.app[0].destAddresses = ""
