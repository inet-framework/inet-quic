[General]
network = bottleneck_link

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

output-vector-file = "${resultdir}/flowControlByFCLimit_delay=${delay}_limit=${rwndStreamLimit}.vec"
output-scalar-file = "${resultdir}/flowControlByFCLimit_delay=${delay}_limit=${rwndStreamLimit}.sca"

**.quic.typename = "Quic"

# Flow Control
**.quic.initialMaxData = ${rwndLimit =4294967295}
**.quic.initialMaxStreamDataBidiRemote = ${rwndStreamLimit = 66560, 102400, 143360}
**.quic.initialMaxStreamDataUni = ${rwndStreamLimit}
**.quic.initialMaxStreamDataBidiLocal = ${rwndStreamLimit}
**.quic.maxDataFrameThreshold = 0.5*${rwndLimit} + ${mtu}
**.quic.maxStreamDataFrameThreshold =  0.5*${rwndStreamLimit} + ${mtu}
**.roundConsumedDataValue = true

**.client.quic.congestionControl = "No"

**.bottleneckDelay = ${delay= 1, 2, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50}ms
**.bottleneckDatarate = 0Mbps

**.ppp[*].ppp.queue.packetCapacity = 1000 
**.ppp[*].ppp.mtu = ${mtu=1280}B

**.client.numApps = 1
**.client.app[*].typename = "TrafficgenCompound"
**.client.app[0].numGenerators = 1

**.client.app[0].generator[0].typename				= "TrafficgenSimple"
**.client.app[0].generator[0].id					= 0
**.client.app[0].generator[0].packetSize			= 2000000B
**.client.app[0].generator[0].startTime				= 2s
**.client.app[0].generator[0].stopTime				= 10s
**.client.app[0].generator[0].packetInterval		= 0ms
**.client.app[0].generator[0].ordered				= false

**.client.app[*].handler.typename = "QuicTrafficgen"
**.client.app[*].handler.localPort = 1001
**.client.app[*].handler.connectPort = 1000
**.client.app[*].handler.connectAddress = "server"

**.client.quic.sendQueueLimit = 50000000 B
**.client.quic.sendQueueLowWaterRatio = .8
**.client.quic.accurateIncreaseInNewRenoCongestionAvoidance = true
**.quic.bundleAckForNonAckElicitingPackets = false

**.server.numApps = 1
**.server.app[*].typename = "QuicDiscardServer"
**.server.app[*].localAddress = ""
**.server.app[*].localPort = 1000

**.server.quic.receiveGoodputStatStartTime = 2s
**.server.quic.receiveGoodputStatEndTime =9s

**.server.quic.numReceivedAckElicitingsBeforeAck = 2



