[General]
#Medium public satellite broadband access
#draft QUIC for SATCOM draft-kuhn-quic-4-sat-04

#  Satellite downlink path: 10 Mbps
#  Satellite uplink path: 2 Mbps
#  No emulated packet loss
#  RTT: 650 ms
#  Buffer size : BDP

network = sat_link

# Using inline XML configuration in order to create asymmetric link
*.configurator.config = xml("<config> \
                                <interface hosts='client' names='ppp0' address='10.0.0.100'/> \
                                <interface hosts='server' names='ppp0' address='10.0.0.50'/> \
								<route hosts='router5' destination='10.0.0.50' netmask='255.255.255.255' interface='ppp1'/>\
								<route hosts='router6' destination='10.0.0.100' netmask='255.255.255.255' interface='ppp2'/>\
                                <interface hosts='**' address='10.x.x.x' netmask='255.x.x.x'/> \
                             </config>")

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

#**.receiver.quic.packetReceived:vector(packetBytes).vector-recording = true
#**.vector-recording = false
#**.scalar-recording = false

# Set the quic module, which can be in the StandardHost anything that implements IQuic, to our concrete Quic implementation
**.quic.typename = "Quic"

**.bottleneckDownlinkDatarate=10Mbps
**.bottleneckUplinkDatarate=2Mbps


# Flow Control
**.quic.initialMaxData = ${rwndLimit =15MB} #4294967295 #2*2097152 # 15Mb=15728640
#**.quic.initialMaxStreamDataBidiRemote = ${rwndStreamLimit = 66560, 102400, 143360}
#**.quic.initialMaxStreamDataBidiRemote = ${rwndStreamLimit = 100000}
#**.quic.initialMaxStreamDataBidiRemote = ${rwndStreamLimit = 66560, 102400, 143360}
**.quic.initialMaxStreamDataBidiRemote = ${rwndStreamLimit = 6MB} #Tom value 2097152 4294967295 # 6Mb=6291456
**.quic.initialMaxStreamDataUni = ${rwndStreamLimit}
**.quic.initialMaxStreamDataBidiLocal = ${rwndStreamLimit}
**.quic.maxDataFrameThreshold =  0.5*${rwndLimit}#0.5*${rwndLimit} + ${mtu}# 0.5*${rwndLimit}
**.quic.maxStreamDataFrameThreshold = 0.5*${rwndStreamLimit} #0.5*${rwndStreamLimit} + ${mtu} #0.5*${rwndStreamLimit}
**.roundConsumedDataValue = ${round = true}
**.server.quic.sendMaxDataFramesImmediately = true

#**.bottleneckDelay = ${delay=215}ms #${delay=1ms, 10ms, 100ms}
#**.bottleneckDatarate = ${bw=10}Mbps #${bw=100Mbps, 10Mbps}

**.ppp[*].queue.frameCapacity = ${q=584} #${q=10,100,1000, 2200} 498 254 3158
**.ppp[*].ppp.mtu = ${mtu=1280}B #${mtu=1280,1452,1500,9000}B

**.client.numApps = 1
**.client.app[*].typename = "TrafficgenCompound"
**.client.app[0].numGenerators = 1
#--------------first stream---------------------------
**.client.app[0].generator[0].typename				= "TrafficgenSimple"
**.client.app[0].generator[0].id					= 0
**.client.app[0].generator[0].packetSize			= 15000B #2000000B #15000B
**.client.app[0].generator[0].startTime				= 2s
**.client.app[0].generator[0].stopTime				= 181s
**.client.app[0].generator[0].packetInterval		= 0ms
**.client.app[0].generator[0].ordered				= false

#--------------second stream---------------------------
**.client.app[0].generator[1].typename				= "TrafficgenSimple"
**.client.app[0].generator[1].id					= 2
**.client.app[0].generator[1].packetSize			= 2000000B #2000000B #1400
**.client.app[0].generator[1].startTime				= 2s
**.client.app[0].generator[1].stopTime				= 81s
**.client.app[0].generator[1].packetInterval		= 0
**.client.app[0].generator[1].ordered				= false
#------------------------------------------------------

**.client.app[*].handler.typename = "QuicTrafficgen"
**.client.app[*].handler.localPort = 1001
**.client.app[*].handler.connectPort = 1000
**.client.app[*].handler.connectAddress = "server"

#**.client.quic.sendQueueLimit = 1315650 #3809120 #1221675 #313000 #37560#12520 #68860 #12520 #431940#1220700 #${ql=$delay*500000} # 68860
# sendBufferUnsentData_min = sendQueueLimit * sendQueueLowWaterRation - cwnd_max > 0
# <==> sendQueueLimit > cwnd_max/LowWaterRatio = (BDP + RouterBuffer)/LowWaterRatio
**.client.quic.sendQueueLimit = 24MB#1830000B#9127080#2000000#5100000#9884540#98845400#1558740# 958740# 1558740#1058740#779370#1058740 #1558740 #2000000# 1315650 #50000000 858740
**.client.quic.sendQueueLowWaterRatio = .8
#**.client.quic.sendLossRate = ${p=.001} #.000005 #00001
#**.client.quic.periodicSendLoss = ${lossper=false}


**.quic.bundleAckForNonAckElicitingPackets = ${bundle = true} #true
**.client.quic.accurateIncreaseInNewRenoCongestionAvoidance = false

**.server.numApps = 1
**.server.app[*].typename = "QuicDiscardServer"
**.server.app[*].localAddress = ""
**.server.app[*].localPort = 1000

**.server.quic.receiveGoodputStatStartTime = 3s
**.server.quic.receiveGoodputStatEndTime =180s #9s

**.server.quic.numReceivedAckElicitingsBeforeAck = ${ackRatio= 2}


#_______________________________________________
#**.ppp[*].queue.frameCapacity = ${q=254}
#**.client.quic.sendQueueLimit = 858740

########## UDP for random traffic
#**.random*.numApps = 1
#**.random*.app[*].typename = "UdpBasicApp"
#**.random*.app[0].localPort = 100
#**.random*.app[0].destPort = 100
#**.random*.app[0].messageLength = int(uniform(100B,1000B))
#**.random*.app[0].sendInterval = uniform(25ms,100ms)
#**.random*.app[0].startTime = 1s
#**.random*.app[0].stopTime = 12s #${$stopTime+1s}

#**.randomCli.app[0].destAddresses = "randomSrv"
#**.randomSrv.app[0].destAddresses = ""